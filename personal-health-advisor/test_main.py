#
# # Generated by Qodo Gen
#
# # from personal-health-advisor.personal-health-advisor import main
#
# # Dependencies:
# # pip install pytest-mock
# import pytest
#
# class TestMain:
#
#     # Valid input values result in correct health report generation
#     def test_valid_input_generates_health_report(self, mocker):
#         # Mock all input calls
#         mocker.patch('builtins.input', side_effect=[
#             "30",  # age
#             "male",  # gender
#             "180",  # height
#             "75",  # weight
#             "moderate",  # activity
#             "vegetarian"  # food preference
#         ])
#
#         # Mock print to capture output
#         mock_print = mocker.patch('builtins.print')
#
#         # Call main function
#         main()
#
#         # Verify expected print calls
#         assert mock_print.call_args_list[1].args[0] == " === Personal Health Report === "
#         assert "Your BMI: 23.15" in mock_print.call_args_list[2].args[0]
#         assert "Normal weight" in mock_print.call_args_list[3].args[0]
#         assert "2.48 liters" in mock_print.call_args_list[4].args[0]
#         assert "2789.06 kcal" in mock_print.call_args_list[5].args[0]
#         assert "Adults need 7-9 hours" in mock_print.call_args_list[7].args[0]
#
#     # Handle invalid gender input (not male/female)
#     def test_invalid_gender_input(self, mocker):
#         # Mock inputs with invalid gender
#         mocker.patch('builtins.input', side_effect=[
#             "30",  # age
#             "other",  # invalid gender
#             "180",  # height
#             "75",  # weight
#             "moderate",  # activity
#             "vegetarian"  # food preference
#         ])
#
#         # Mock print to capture output
#         mock_print = mocker.patch('builtins.print')
#
#         # Call main function
#         main()
#
#         # Verify calorie calculation uses female as default
#         # Female BMR formula: 10 * weight + 6.25 * height - 5 * age - 161
#         expected_calories = (10 * 75 + 6.25 * 180 - 5 * 30 - 161) * 1.55
#         assert f"{round(expected_calories, 2)} kcal" in mock_print.call_args_list[5].args[0]
